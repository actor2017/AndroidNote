https://github.com/H07000223/FlycoDialog_Master

compile 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'//从下往上弹Dialog等

一个强大的Android对话框库,简化自定义对话框.支持2.2+.

1.特点
内置Dialog,方便直接使用
丰富的内置动画库,方便直接使用
支持快速自定义Dialog
支持快速自定义Popup
支持自定义Dialog动画


2.如何快速自定义Dialog
步骤一:继承BaseDialog(或者BottomBaseDialog或者TopBaseDialog)
步骤二:在onCreateView方法填充布局和查找控件
步骤三:在setUiBeforShow方法中做一些逻辑操作,例如设置数据,设置监听之类

public class CustomBaseDialog extends BaseDialog<CustomBaseDialog> {
    private TextView tv_cancel;
    private TextView tv_exit;

    public CustomBaseDialog(Context context) {
        super(context);
    }

    @Override
    public View onCreateView() {
        widthScale(0.85f);
        showAnim(new Swing());

        // dismissAnim(this, new ZoomOutExit());
        View inflate = View.inflate(context, R.layout.dialog_custom_base, null);
        tv_cancel = ViewFindUtils.find(inflate, R.id.tv_cancel);
        tv_exit = ViewFindUtils.find(inflate, R.id.tv_exit);
        inflate.setBackgroundDrawable(
                CornerUtils.cornerDrawable(Color.parseColor("#ffffff"), dp2px(5)));

        return inflate;
    }

    @Override
    public boolean setUiBeforShow() {
        tv_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dismiss();
            }
        });

        tv_exit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dismiss();
            }
        });

        return false;
    }
}

3.如何快速自定义Popup
步骤一:继承BasePopup
步骤二:在onCreatePopupView方法填充布局和查找控件
步骤三:在setUiBeforShow方法中做一些逻辑操作,例如设置数据,设置监听之类

public class SimpleCustomPop extends BasePopup<SimpleCustomPop> {
        public SimpleCustomPop(Context context) {
            super(context);
        }

        @Override
        public View onCreatePopupView() {
            return View.inflate(mContext, R.layout.popup_custom, null);
        }

        @Override
        public void setUiBeforShow() {

        }
    }
