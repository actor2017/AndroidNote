https://github.com/Tamsiree/RxTool
Android开发人员不得不收集的工具类集合 | 支付宝支付 | 微信支付（统一下单） | 微信分享 | Zip4j压缩（支持分卷压缩与加密） | 一键集成UCrop选择圆形头像 | 一键集成二维码和条形码的扫描与生成 | 常用Dialog | WebView的封装可播放视频 | 仿斗鱼滑动验证码 | Toast封装 | 震动 | GPS | Location定位 | 图片缩放 | Exif 图片添加地理位置信息（经纬度） | 蛛网等级 | 颜色选择器 | ArcGis | VTPK | 编译运行一下说不定会找到惊喜

添加依赖:
1.maven { url "https://jitpack.io" }
2.compile 'com.github.vondear:RxTools:v1.7.6'//请替换成上方 JitPack 最新的版本号

3.在Application中初始化 RxTool.init(this);

自定义控件介绍
Name	description	Module
RxAutoImageView	ImageView实现自动左右移动效果	RxUI
RxBarCode	条形码控件	RxUI
RxCaptcha	验证码控件	RxUI
RxCardStackView	银行卡组叠加效果	RxUI
RxCobwebView	蛛网等级控件	RxUI
RxHeartLayout	直播爱心点赞控件	RxUI
RxNetSpeedView	显示当前网速控件	RxUI
RxPopupView	自定义PopupWindow控件	RxUI
RxProgressBar	自定义进度条	RxUI
RxQRCode	二维码控件	RxUI
RxRoundProgress	实现弧形进度条	RxUI
RxRulerWheelView	刻度横向滚动控件	RxUI
RxRunTextView	TextView实现跑马灯效果	RxUI
RxScaleImageView	图片缩放控件	RxUI
RxSeatAirplane	飞机票选座控件	RxUI
RxSeatMovie	电影院选座控件	RxUI
RxShineButton	点赞按钮	RxUI
RxShoppingView	商品数量加减控件	RxUI
RxSwipeCaptcha	滑块验证码控件（仿斗鱼验证码）	RxUI
RxTextAutoZoom	文字根据布局大小自动缩放效果	RxUI
RxTextViewVertical	单行文字上下滚动	RxUI
RxTextViewVerticalMore	多行文字上下滚动	RxUI
RxTitle	自定义标题控件	RxUI
RxToast	Toast的封装	RxKit


Activity的封装
Name	description	Module
ActivityBase	封装了FragmentActivity与Context成员参数	RxUI
ActivityBaseLocation	封装了定位操作的Activity	RxUI
ActivityCodeTool	封装了生成二维码与条形码的Activity	RxFeature
ActivityScanerCode	封装了扫描二维码与条形码的Activity	RxFeature
ActivityWebView	封装了可播放视频、获取网页标题并可根据内容自动适应大小WebView的Activity	RxUI


Dialog的封装（RxDialog）
Name	description
skipTools	隐藏头部导航栏状态栏
setFullScreen	文字根据布局大小自动缩放效果
setFullScreenWidth	设置宽度match_parent
setFullScreenHeight	设置高度为match_parent
setOnWhole	设置成全局Dialog


功能模块介绍
RxTool（常用功能）
Name	description
init	RxKit库的初始化方法
getContext	获取Application的Context
delayToDo	执行延时任务
countDown	倒计时（获取验证码倒计时）
fixListViewHeight	手动计算出listView的高度，但是不再具有滚动效果
Md5	生成MD5加密32位字符串
getResIdByName	根据资源名称获取资源id
isFastClick	判断控件是否被快速点击
setEdTwoDecimal	首位小数点自动加零，最多两位小数
setEdType	EditText 只允许输入数字和汉字
setEdDecimal	首位小数点自动加零
setEditNumberAuto	数字前自动补零（例如：1 格式化成 001）
setEditNumber	数字前补零（例如：1 格式化成 001）
getBackgroundHandler	获取用于后台运行的Handler


RxActivityTool（Activity相关）
Name	description
addActivity	添加Activity 到栈
currentActivity	获取当前的Activity（堆栈中最后一个压入的）
finishActivity	结束当前Activity（堆栈中最后一个压入的）
finishAllActivity	结束所有的Activity
AppExit	退出当前APP
getActivityStack	获取Activity栈
单个Activity操作	
isExistActivity	判断是否存在指定Activity
launchActivity	打开指定的Activity
skipActivity	跳转到指定Activity
skipActivityAndFinish	跳转到指定Activity并关闭当前Activity
skipActivityAndFinishAll	跳转后Finish之前所有的Activity
skipActivityForResult	activityForResult封装
getLauncherActivity	获取launcher activity


RxAnimationTool（动画相关）
Name	description
animationColorGradient	颜色渐变动画
cardFilpAnimation	卡片翻转动画
zoomIn	缩小动画
zoomOut	放大动画


RxAppTool（应用相关）
Name	description
InstallAPK	安装APK
installApp	安装App（支持7.0）
installAppSilent	静默安装App
uninstallApp	卸载App
uninstallAppSilent	静默卸载App
isAppRoot	判断App是否有root权限
launchApp	打开App
getAppPackageName	获取App包名
getAppDetailsSettings	获取App具体设置
getAppName	获取App名称
getAppIcon	获取App图标
getAppPath	获取App路径
getAppVersionName	获取App版本号
getAppVersionCode	获取App版本码
isSystemApp	判断App是否是系统应用
isAppDebug	判断App是否是Debug版本
getAppSignature	获取App签名
getAppSignatureSHA1	获取应用签名的的SHA1值
isInstallApp	判断App是否安装
getAppInfo	获取当前App信息
getBean	得到AppInfo的Bean
getAllAppsInfo	获取所有已安装App信息
isAppBackground	判断当前App处于前台还是后台


还有很多...



支付工具类
支付宝支付:
    AliPayTools.aliPay(mContext,
        APP_ID,//支付宝分配的APP_ID
        isRSA2,//是否是 RSA2 加密
        RSA_PRIVATE,// RSA 或 RSA2 字符串
        new AliPayModel(order_id,//订单ID (唯一)
                        money,//价格
                        name,//商品名称
                        detail),//商品描述详情 (用于显示在 支付宝 的交易记录里)
        new onRequestListener() {
            @Override
            public void onSuccess(String s) {RxToast.success("支付成功");}

            @Override
            public void onError(String s) {RxToast.error("支付失败");
        }
    });
微信支付:
第一种情景: 支付操作全部在APP端完成(包括统一下单接口) 即支付过程无后台参与

    WechatPayTools.wechatPayUnifyOrder(mContext,
        WX_APP_ID, //微信分配的APP_ID
        WX_PARTNER_ID, //微信分配的 PARTNER_ID (商户ID)
        WX_PRIVATE_KEY, //微信分配的 PRIVATE_KEY (私钥)
        new WechatModel(order_id, //订单ID (唯一)
                        money, //价格
                        name, //商品名称
                        detail), //商品描述详情
        new onRequestListener() {
            @Override
            public void onSuccess(String s) {}

            @Override
            public void onError(String s) {}
    });
第二种情景: 从后台获取到 prepayid（预支付订单ID） 之后,在App端进行支付操作

    wechatPayApp(mContext,
        app_id, //微信分配的APP_ID
        partner_id, //微信分配的 PARTNER_ID (商户ID)
        wx_private_key, //微信分配的 PRIVATE_KEY (私钥)
        prepay_id, //订单ID (唯一)
        new onRequestListener() {
            @Override
            public void onSuccess(String s) {}

            @Override
            public void onError(String s) {}
    });

微信分享:
分享网页

    WechatShareTools.init(mContext, WX_APP_ID);//初始化

    String url = "https://github.com/vondear/RxTool";//网页链接

    String description = "工欲善其事必先利其器！";//描述

    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);//获取Bitmap
    byte[] bitmapByte = RxImageTool.bitmap2Bytes(bitmap, Bitmap.CompressFormat.PNG);//将 Bitmap 转换成 byte[]

    mWechatShareModel = new WechatShareModel(url, "APP名称", description, bitmapByte);

    //Friend 分享微信好友,Zone 分享微信朋友圈,Favorites 分享微信收藏
    WechatShareTools.shareURL(mWechatShareModel, WechatShareTools.SharePlace.Friend);//分享操作


