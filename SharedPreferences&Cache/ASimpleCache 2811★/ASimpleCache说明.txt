https://github.com/yangfuhai/ASimpleCache
ASimpleCache 是一个为android制定的 轻量级的 开源缓存框架。轻量到只有一个java文件（由十几个类精简而来）。

1、它可以缓存什么东西？
普通的字符串、JsonObject、JsonArray、Bitmap、Drawable、序列化的java对象，和 byte数据。

2、它有什么特色？
特色主要是：
1：轻，轻到只有一个JAVA文件。
2：可配置，可以配置缓存路径，缓存大小，缓存数量等。
3：可以设置缓存超时时间，缓存超时自动失效，并被删除。
4：支持多进程。

3、它在android中可以用在哪些场景？
1、替换SharePreference当做配置文件
2、可以缓存网络请求数据，比如oschina的android客户端可以缓存http请求的新闻内容，缓存时间假设为1个小时，超时后自动失效，让客户端重新请求新的数据，减少客户端流量，同时减少服务器并发量。
3、您来说...


在application中的onCreate中初始化:
注意:不能在fragment中获取activity,否则报错
mCache = ACache.get(this);

//========================================================================
1.缓存string
mCache.put("testString", mEt_string_input.getText().toString());//存
mCache.getAsString("testString");				//取
mCache.remove("testString");					//删除

//========================================================================
2.缓存JsonObject
onCreate中
		jsonObject = new JSONObject();
		try {
			jsonObject.put("name", "Yoson");
			jsonObject.put("age", 18);
		} catch (JSONException e) {
			e.printStackTrace();
		}
		mTv_jsonobject_original.setText(jsonObject.toString());

//------------------------------
mCache.put("testJsonObject", jsonObject);			//存
mCache.getAsJSONObject("testJsonObject");			//取
mCache.remove("testJsonObject");				//删除

//========================================================================
3.缓存JsonArray
		jsonArray = new JSONArray();
		JSONObject yosonJsonObject = new JSONObject();

		try {
			yosonJsonObject.put("name", "Yoson");
			yosonJsonObject.put("age", 18);
		} catch (JSONException e) {
			e.printStackTrace();
		}

		JSONObject michaelJsonObject = new JSONObject();
		try {
			michaelJsonObject.put("name", "Michael");
			michaelJsonObject.put("age", 25);
		} catch (JSONException e) {
			e.printStackTrace();
		}

		jsonArray.put(yosonJsonObject);
		jsonArray.put(michaelJsonObject);

		mTv_jsonarray_original.setText(jsonArray.toString());

//------------------------------
mCache.put("testJsonArray", jsonArray);				//存
mCache.getAsJSONArray("testJsonArray");				//取
mCache.remove("testJsonArray");					//删除

//========================================================================
4.缓存Bitmap
		Resources res = getResources();
		Bitmap bitmap = BitmapFactory.decodeResource(res, R.drawable.img_test);
		mCache.put("testBitmap", bitmap);			//存

		Bitmap testBitmap = mCache.getAsBitmap("testBitmap");	//取
		if (testBitmap != null) {
			mIv_bitmap_res.setImageBitmap(testBitmap);
		}

		mCache.remove("testBitmap");				//删除

//========================================================================
5.缓存Drawable
	public void save(View v) {					//存
		Resources res = getResources();
		Drawable drawable = res.getDrawable(R.drawable.img_test);
		mCache.put("testDrawable", drawable);
	}

	public void read(View v) {					//取
		Drawable testDrawable = mCache.getAsDrawable("testDrawable");
		if (testDrawable != null) {
			mIv_drawable_res.setImageDrawable(testDrawable);
		}
	}

	public void clear(View v) {					//删除
		mCache.remove("testDrawable");
	}

//========================================================================
6.缓存 序列化的java对象
		userBean = new UserBean();		//UserBean implements Serializable
		userBean.setAge("18");
		userBean.setName("HaoYoucai");

	public void save(View v) {					//存
		mCache.put("testObject", userBean);
	}

	public void read(View v) {					//取
		UserBean testObject = (UserBean) mCache.getAsObject("testObject");
		if (testObject == null) {
			Toast.makeText(this, "Object cache is null ...", Toast.LENGTH_SHORT)
					.show();
			mTv_object_res.setText(null);
			return;
		}
		mTv_object_res.setText(testObject.toString());
	}

	public void clear(View v) {					//删除
		mCache.remove("testObject");
	}

//========================================================================
7.缓存Media(byte数据)

    private String mUrl = "http://www.largesound.com/ashborytour/sound/brobob.mp3";
    private static String CACHE_KEY = "brobob";

new Thread(){
    @Override
    public void run() {
        OutputStream ostream = null;
        try {
            ostream = mCache.put(CACHE_KEY);				//存
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        if (ostream == null){
            Toast.makeText(this, "Open stream error!", Toast.LENGTH_SHORT)
                    .show();
            return;
        }
        try {
            URL u = new URL(mUrl);
            HttpURLConnection conn = (HttpURLConnection) u.openConnection();
            conn.connect();
            InputStream stream = conn.getInputStream();

            byte[] buff = new byte[1024];
            int counter;

            while ((counter = stream.read(buff)) > 0){
                ostream.write(buff, 0, counter);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                // cache update
                ostream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    text = (TextView) findViewById(R.id.text);
                    text.setText("done...");
                }
            });
        }
    }
}.start();


        InputStream stream = null;
        try {
            stream = mCache.get(CACHE_KEY);				//取
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        if (stream == null) {
			Toast.makeText(this, "Bitmap cache is null ...", Toast.LENGTH_SHORT)
					.show();
            text.setText("file not found");
			return;
		}
        try {
            text.setText("file size: " + stream.available());
        } catch (IOException e) {
            text.setText("error " + e.getMessage());
        }

mCache.remove(CACHE_KEY);						//删除


