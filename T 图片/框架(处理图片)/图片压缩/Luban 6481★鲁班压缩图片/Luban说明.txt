https://github.com/Curzibn/Luban
Luban(鲁班)―Image compression with efficiency very close to WeChat Moments/可能是最接近微信朋友圈的图片压缩算法

1.导入
compile 'top.zibin:Luban:1.1.8'//鲁班压缩

方法列表
方法			描述
load			传入原图
filter			设置开启压缩条件
ignoreBy		不压缩的阈值，单位为K
setFocusAlpha		设置是否保留透明通道
setTargetDir		缓存压缩图片路径
setCompressListener	压缩回调接口
setRenameListener	压缩前重命名接口

2.异步调用
Luban内部采用IO线程进行图片压缩，外部调用只需设置好结果监听即可：
Luban.with(this)
        .load(photos)                                   // 传入要压缩的图片列表
        .ignoreBy(100)                                  // 忽略不压缩图片的大小
        .setTargetDir(getPath())                        // 设置压缩后文件存储位置
        .filter(new CompressionPredicate() {		//设置开启压缩条件
          @Override
          public boolean apply(String path) {
            return !(TextUtils.isEmpty(path) || path.toLowerCase().endsWith(".gif"));
          }
        })
        .setCompressListener(new OnCompressListener() { //设置回调
          @Override
          public void onStart() {
            // TODO 压缩开始前调用，可以在方法内启动 loading UI
          }

          @Override
          public void onSuccess(File file) {
            // TODO 压缩成功后调用，返回压缩后的图片文件
          }

          @Override
          public void onError(Throwable e) {
            // TODO 当压缩过程出现问题时调用
          }
        }).launch();    //启动压缩


3.同步调用
同步方法请尽量避免在主线程调用以免阻塞主线程，下面以rxJava调用为例
Flowable.just(photos)
    .observeOn(Schedulers.io())
    .map(new Function<List<String>, List<File>>() {
      @Override public List<File> apply(@NonNull List<String> list) throws Exception {
        // 同步方法直接返回压缩后的文件
        return Luban.with(MainActivity.this).load(list).get();
      }
    })
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe();
